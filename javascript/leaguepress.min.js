/*! leaguepress 2013-09-27 */
(function ($) {$(function(){
if ("undefined" === typeof window.resourcePath) {
    window.resourcePath = "./src/";
}

function log(obj) {
    $.fn.LeaguePress.log(obj);
}

function loadResource(path, resourceName, dataType) {
    if ("undefined" === typeof dataType) {
        dataType = "json";
    }
    if ("undefined" === typeof $.fn.LeaguePress[resourceName]) {
        return $.ajax(path, {
            async: false,
            dataType: dataType
        }).done(function(data) {
            $.fn.LeaguePress[resourceName] = data;
        }).error(function(jqXHR, textStatus, errorThrown) {
            log(jqXHR.status + " : " + textStatus + " : " + errorThrown);
        });
    }
}

window.loadResource = loadResource;

function loadTemplate(fileName, templateName) {
    if ("LeaguePress" in window && fileName in window["LeaguePress"]) {
        return window["LeaguePress"][fileName];
    }
    loadResource(resourcePath + "templates/" + fileName, templateName, "html");
    return Handlebars.compile($.fn.LeaguePress[templateName]);
}

window.loadTemplate = loadTemplate;

$.fn.LeaguePress = $.fn.LeaguePress || {};

$.fn.LeaguePress.resources = $.fn.LeaguePress.resources || {
    champions: null,
    summonerspells: null,
    runes: null,
    items: null,
    masteries: null
};

$.fn.LeaguePress.debug = $.fn.LeaguePress.debug || false;

$.fn.LeaguePress.log = function(o) {
    if ($.fn.LeaguePress.debug) {
        console.log(o);
    }
};

$.fn.LeaguePress.log("Logging enabled.");

$.fn.LeaguePress.findByCode = function(resourceName, code) {
    for (var index in $.fn.LeaguePress[resourceName]) {
        if (code === $.fn.LeaguePress[resourceName][index].code) {
            return $.fn.LeaguePress[resourceName][index];
        }
    }
    return null;
};

$.fn.LeaguePress.promises = [];

for (var key in $.fn.LeaguePress.resources) {
    var ref = $.fn.LeaguePress.resources[key];
    if (null !== ref && ref.substr(0, 4) === "http") {
        $.fn.LeaguePress.promises.push(loadResource(ref, key, "jsonp"));
    } else {
        $.fn.LeaguePress.promises.push(loadResource(resourcePath + "library/" + key + ".json", key));
    }
}

Handlebars.registerHelper("ifPassive", function(abilityType, slots, options) {
    if (abilityType === "passive" || abilityType === "mantra") {
        return options.fn(slots);
    }
    return options.inverse({
        slots: slots,
        ability: this
    });
});

Handlebars.registerHelper("ifMoreThanOne", function(number, context, options) {
    if (number > 1) {
        return options.fn(context);
    }
    return "";
});

Handlebars.registerHelper("cssCode", function(code, options) {
    if (typeof code === "undefined" || null === code) {
        return "undefined";
    }
    return code.replace(/[\s_]+/g, "-");
});

function Champion() {
    this.build = {
        abilities: {},
        level: 1
    };
}

Champion.prototype = {
    save: function() {
        var data = {
            code: null,
            abilities: [],
            level: this.build.level
        };
        if (this.code) {
            data.code = this.code;
        }
        $.each(this.build.abilities, function(key, value) {
            data.abilities.push({
                code: key,
                levels: value.slice(0)
            });
        });
        return data;
    },
    setData: function(data) {
        for (var property in data) {
            this[property] = data[property];
        }
    },
    getDescription: function() {
        return this.description;
    },
    getCode: function() {
        return this.code;
    },
    removeBuildAbility: function(ability, position) {
        position = parseInt(position, 10);
        if (this.build.abilities.hasOwnProperty(ability)) {
            for (var i = 0; i < this.build.abilities[ability].length; i++) {
                if (this.build.abilities[ability][i] === position) {
                    this.build.abilities[ability].splice(i, 1);
                }
            }
        }
    },
    addBuildAbility: function(ability, position) {
        position = parseInt(position, 10);
        var abilityData = this.getAbilityByCode(ability);
        if (typeof this.build.abilities[ability] === "undefined") {
            this.build.abilities[ability] = [];
        }
        var clone = this.cloneBuild();
        clone[ability].push(position);
        clone[ability].sort(function(a, b) {
            return a < b ? -1 : 1;
        });
        var isValid = this.validateBuild(clone, position, abilityData);
        if (isValid) {
            this.build.abilities[ability].push(position);
            this.build.abilities[ability].sort(function(a, b) {
                return a < b ? -1 : 1;
            });
        }
        return isValid;
    },
    cloneBuild: function() {
        var clone = {};
        for (var prop in this.build.abilities) {
            clone[prop] = this.build.abilities[prop].slice(0);
        }
        return clone;
    },
    validateBuild: function(build, position, newAbilityData) {
        if (typeof position !== "number") {
            throw {
                name: "InvalidPositionValue",
                message: "Number expected but other type found."
            };
        }
        function EvolutionsSortCompareFn(a, b) {
            return a < b ? -1 : 1;
        }
        for (var ability in build) {
            if (build.hasOwnProperty(ability)) {
                var abilityData = this.getAbilityByCode(ability);
                if (abilityData.type === "passive" && build[ability].length > 0) {
                    log("Passive ability with points found");
                    return false;
                }
                if (abilityData.archetype === "basic" && build[ability].length > 0) {
                    for (var i = 0; i < build[ability].length; i++) {
                        var abilityLevel = i + 1;
                        var championLevel = parseInt(build[ability][i], 10);
                        if (abilityLevel > Math.ceil(championLevel / 2)) {
                            log("Ability level max exceeded: alvl=" + abilityLevel + " max=" + Math.ceil(championLevel / 2) + " clvls: " + build[ability]);
                            return false;
                        }
                    }
                }
                if (abilityData.archetype === "basic" && build[ability].length > 0) {
                    if (build[ability].length > 5) {
                        return false;
                    }
                }
                if (abilityData.archetype === "ultimate" && build[ability].length > 0) {
                    if (build[ability].length > 3) {
                        return false;
                    }
                    for (var k = 0; k < build[ability].length; k++) {
                        cLvl = parseInt(build[ability][k], 10);
                        if (0 === k && cLvl < 6 || 1 === k && cLvl < 11 || 2 === k && cLvl < 16) {
                            return false;
                        }
                    }
                }
                if (abilityData.type === "evolution" && build[ability].length > 0) {
                    if (build[ability].length > 1) {
                        return false;
                    }
                    var evolutions = [];
                    for (var evo in build) {
                        if (this.getAbilityByCode(evo).type === "evolution") {
                            evolutions = evolutions.concat(build[evo]);
                        }
                    }
                    evolutions.sort(EvolutionsSortCompareFn);
                    if (evolutions.length > 3) {
                        log("Max evolutions exceeded.");
                        return false;
                    }
                    for (var evoIdx = 0; evoIdx < evolutions.length; evoIdx++) {
                        ecLvl = parseInt(evolutions[evoIdx], 10);
                        if (0 === evoIdx && ecLvl < 6 || 1 === evoIdx && ecLvl < 11 || 2 === evoIdx && ecLvl < 16) {
                            log("Evolution level max exceeded.");
                            return false;
                        }
                    }
                }
                for (var j = 0; j < this.build.abilities[ability].length; j++) {
                    var chLvl = parseInt(this.build.abilities[ability][j], 10);
                    if (chLvl === position && abilityData.type !== "evolution" && newAbilityData.type !== "evolution") {
                        return false;
                    }
                }
            }
        }
        return true;
    },
    getAbilityByCode: function(abilityCode) {
        for (var i = 0; i < this.abilities.length; i++) {
            if (this.abilities[i].code === abilityCode) {
                return this.abilities[i];
            }
        }
        throw {
            name: "AbilityNotFound",
            message: "Champion ability not found: " + abilityCode
        };
    }
};

function ItemSet() {
    this.items = [ null, null, null, null, null, null ];
    this.title = "...";
    this.currentItemIndex = 0;
}

function BuildItem(itemCode) {
    this.code = itemCode;
    this.amount = 1;
}

ItemSet.prototype = {
    isValidIndex: function(index) {
        if (index > 5) {
            throw {
                name: "InvalidItemIndex",
                message: "Index should be between 0 and 5."
            };
        }
    },
    ensureValidIndex: function(index) {
        if (index > 5) {
            return 5;
        } else if (index < 0) {
            return 0;
        } else {
            return index;
        }
    },
    getItemData: function(itemCode) {
        var itemData = $.fn.LeaguePress.findByCode("items", itemCode);
        if (null == itemCode) {
            throw {
                name: "UnknownItem",
                message: "Item not found: " + itemCode
            };
        }
        return itemData;
    },
    addItem: function(itemCode) {
        this.addItemAtIndex(itemCode, this.getCurrentItemIndex());
        this.currentItemIndex++;
    },
    addItemAtIndex: function(itemCode, index, amount) {
        this.isValidIndex(index);
        var itemData = this.getItemData(itemCode);
        if ("undefined" !== typeof amount && index < 6 && null !== itemData) {
            this.items[index] = new BuildItem(itemCode);
            if ("undefined" !== typeof itemData.amountPerSlot) {
                this.items[index].isMultiple = true;
                if (amount <= itemData.amountPerSlot) {
                    this.items[index].amount = amount;
                }
            }
        } else if (null !== this.items[index] && itemCode === this.items[index].code && "undefined" !== typeof itemData.amountPerSlot) {
            if (this.items[index].amount < itemData.amountPerSlot) {
                this.items[index].amount++;
            }
        } else {
            this.items[index] = new BuildItem(itemCode);
            if ("undefined" !== typeof itemData.amountPerSlot && itemData.amountPerSlot > 1) {
                this.items[index].isMultiple = true;
            }
        }
    },
    removeItemAtIndex: function(index) {
        this.isValidIndex(index);
        if (null != this.items[index] && this.items[index].amount > 1) {
            this.items[index].amount--;
        } else {
            this.items[index] = null;
        }
    },
    getCurrentItemIndex: function() {
        if (this.currentItemIndex < 0 || this.currentItemIndex > 5) {
            return this.currentItemIndex = 5;
        }
        return this.currentItemIndex;
    }
};

function ItemsBuild() {
    this.itemSets = [];
    this.itemSets.push(new ItemSet());
    this.currentSetIndex = 0;
}

ItemsBuild.prototype = {
    save: function() {
        var data = [];
        $.each(this.itemSets, function(itemSetIndex, itemSet) {
            data[itemSetIndex] = {
                title: itemSet.title,
                items: []
            };
            $.each(itemSet.items, function(itemIndex, item) {
                if (item) {
                    data[itemSetIndex].items.push({
                        code: item.code,
                        amount: item.amount
                    });
                }
            });
        });
        return data;
    },
    getCurrentItemSet: function() {
        if (0 === this.itemSets.length) {
            this.itemSets.push(new ItemSet());
            return 0;
        }
        while (this.currentSetIndex >= 0) {
            if ("undefined" === this.itemSets[this.currentSetIndex]) {
                this.currentSetIndex--;
            } else {
                return this.currentSetIndex;
            }
        }
        this.currentSetIndex = 0;
        if ("undefined" !== typeof this.itemSets[0]) {
            this.itemSets[0] = new ItemSet();
        }
        return this.currentSetIndex;
    },
    addItemSet: function(items) {
        var itemset = new ItemSet();
        if ($.isArray(items)) {
            $.each(items, function(index, value) {
                if (index < 6) {
                    itemset.addItemAtIndex(value.code, index, value.amount);
                }
            });
        }
        this.itemSets.push(itemset);
        return itemset;
    },
    removeItemSet: function(itemSetIndex) {
        this.itemSets.splice(itemSetIndex, 1);
    },
    reorderItemSets: function(newOrder) {
        var newItemSets = [];
        for (var i = 0; i < newOrder.length; i++) {
            var itemSetIndex = newOrder[i];
            if ("undefined" !== typeof this.itemSets[itemSetIndex]) {
                newItemSets.push(this.itemSets.splice(itemSetIndex, 1));
            }
        }
        for (var j = 0; j < this.itemSets.length; j++) {
            if ("undefined" !== typeof this.itemSets[j]) {
                newItemSets.push(this.itemSets[j]);
            }
        }
        this.itemSets = newItemSets;
    },
    addItem: function(itemCode) {
        var itemSet = this.itemSets[this.getCurrentItemSet()];
        itemSet.addItem(itemCode);
    },
    isValidIndex: function(itemSetIndex) {
        if ("undefined" === typeof this.itemSets[itemSetIndex]) {
            throw {
                name: "UndefinedItemSet",
                message: "Itemset does not exist."
            };
        }
    },
    addItemAtIndex: function(itemCode, itemSetIndex, itemIndex) {
        this.isValidIndex(itemSetIndex);
        this.itemSets[itemSetIndex].addItemAtIndex(itemCode, itemIndex);
    },
    removeItemAtIndex: function(itemSetIndex, itemIndex) {
        this.isValidIndex(itemSetIndex);
        this.itemSets[itemSetIndex].removeItemAtIndex(itemIndex);
    },
    setTitle: function(title, itemSetIndex) {
        this.isValidIndex(itemSetIndex);
        this.itemSets[itemSetIndex].title = title;
    }
};

function MasteriesBuild() {
    this.build = {};
    this.seasonCode = "season_three";
    this.context = null;
    this.setContext();
}

MasteriesBuild.prototype = {
    save: function() {
        var data = [];
        $.each(this.build, function(key, value) {
            data.push({
                code: key,
                rank: value
            });
        });
        return data;
    },
    addMastery: function(masteryCode) {
        var clone = this.clone();
        if (masteryCode in this.build) {
            clone.build[masteryCode]++;
        } else {
            clone.build[masteryCode] = 1;
        }
        var validationResult = clone.validate();
        if (validationResult) {
            this.build = $.extend(true, {}, clone.build);
        }
        return validationResult;
    },
    clone: function() {
        var c = new MasteriesBuild();
        c.build = $.extend(true, {}, this.build);
        c.context = $.extend(true, {}, this.context);
        return c;
    },
    removeMastery: function(masteryCode) {
        if (masteryCode in this.build && this.build[masteryCode] > 1) {
            this.build[masteryCode]--;
        } else {
            delete this.build[masteryCode];
        }
    },
    validate: function() {
        var ctx = this.context = this.getContext();
        if (this.context.buildTotal > 30) {
            return false;
        }
        for (var treeIdx = 0; treeIdx < ctx.trees.length; treeIdx++) {
            for (var tierIdx = 0; tierIdx < ctx.trees[treeIdx].tiers.length; tierIdx++) {
                var masters = ctx.trees[treeIdx].tiers[tierIdx].masteries;
                for (var masteryIdx = 0; masteryIdx < masters.length; masteryIdx++) {
                    for (var k = 0; k < masters.length; k++) {
                        if (masters[k].maxRank < this.build[masters[k].code]) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    },
    getContext: function(ctx) {
        if ("undefined" === typeof ctx) {
            ctx = this.context;
        }
        ctx.buildTotal = 0;
        for (var i = 0; i < ctx.trees.length; i++) {
            ctx.trees[i].treeTotal = 0;
            for (var j = 0; j < ctx.trees[i].tiers.length; j++) {
                ctx.trees[i].tiers[j].tierTotal = 0;
                var masters = ctx.trees[i].tiers[j].masteries;
                for (var k = 0; k < masters.length; k++) {
                    if (masters[k].code in this.build) {
                        masters[k].rank = this.build[masters[k].code];
                        ctx.trees[i].tiers[j].tierTotal += this.build[masters[k].code];
                    } else {
                        masters[k].rank = 0;
                    }
                }
                ctx.trees[i].treeTotal += ctx.trees[i].tiers[j].tierTotal;
            }
            ctx.buildTotal += ctx.trees[i].treeTotal;
        }
        for (var treeIdx = 0; treeIdx < ctx.trees.length; treeIdx++) {
            for (var tierIdx = 0; tierIdx < ctx.trees[treeIdx].tiers.length; tierIdx++) {
                var mdk = ctx.trees[treeIdx].tiers[tierIdx].masteries;
                for (var masteryIdx = 0; masteryIdx < mdk.length; masteryIdx++) {
                    if (ctx.trees[treeIdx].treeTotal < tierIdx * 4) {
                        mdk[masteryIdx].isDisabled = true;
                    } else {
                        mdk[masteryIdx].isDisabled = false;
                    }
                    if (30 === ctx.buildTotal && 0 === mdk[masteryIdx].rank) {
                        mdk[masteryIdx].isDisabled = true;
                    }
                }
            }
        }
        return ctx;
    },
    setContext: function() {
        var season = $.fn.LeaguePress.findByCode("masteries", this.seasonCode);
        if (null == season) {
            throw {
                name: "MasteriesNotFound",
                message: "Masteries not found."
            };
        }
        if (null == this.context) {
            this.context = $.extend(true, {}, season);
        }
        return season;
    }
};

function RunesBuild() {
    this.runes = {
        glyph: {},
        mark: {},
        seal: {},
        quintessence: {}
    };
}

RunesBuild.prototype = {
    save: function() {
        var data = {};
        $.each(this.runes, function(typeIndex, typeData) {
            data[typeIndex] = [];
            $.each(typeData, function(runeCode, runeData) {
                data[typeIndex].push({
                    code: runeCode,
                    amount: runeData.amount
                });
            });
        });
        return data;
    },
    load: function(data) {
        var that = this;
        that.runes = {
            glyph: {},
            mark: {},
            seal: {},
            quintessence: {}
        };
        $.each(data, function(typeKey, typeRunes) {
            if (typeKey in that.runes) {
                $.each(typeRunes, function(index, rune) {
                    var runeData = $.fn.LeaguePress.findByCode("runes", rune.code);
                    if (runeData) {
                        that.runes[typeKey][rune.code] = $.extend(true, {
                            amount: rune.amount
                        }, runeData);
                    }
                });
            }
        });
    },
    addRune: function(runeCode) {
        if (typeof runeCode === "undefined") {
            return;
        }
        var runeData = $.fn.LeaguePress.findByCode("runes", runeCode);
        var type = runeData.type.toLowerCase();
        if (type in this.runes) {
            var total = 0;
            for (var k in this.runes[type]) {
                total = total + this.runes[type][k].amount;
            }
            if (type !== "quintessence" && total < 9 || type === "quintessence" && total < 3) {
                if (runeData.code in this.runes[type]) {
                    this.runes[type][runeData.code].amount++;
                } else {
                    this.runes[type][runeData.code] = $.extend(true, {
                        amount: 1
                    }, runeData);
                }
            }
        }
    },
    removeRune: function(runeCode) {
        var runeData = $.fn.LeaguePress.findByCode("runes", runeCode);
        var type = runeData.type.toLowerCase();
        if (type in this.runes) {
            if (runeData.code in this.runes[type] && this.runes[type][runeData.code].amount > 1) {
                this.runes[type][runeData.code].amount--;
            } else {
                delete this.runes[type][runeData.code];
            }
        }
    }
};

function ChampionSpells() {
    this.spells = [ null, null ];
}

ChampionSpells.prototype = {
    save: function() {
        return this.spells.slice(0);
    },
    load: function(data) {
        if ($.isArray(data)) {
            this.spells = data.slice(0, 2);
        }
    },
    setSpell: function(number, summonerSpellCode) {
        var index = parseInt(number, 10);
        summonerSpellCode = summonerSpellCode.toLowerCase();
        if (0 > index || index > 1) {
            throw {
                name: "InvalidSummonerSpellSlotNumber",
                message: "Expected the value 0 or 1."
            };
        }
        for (var i in this.spells) {
            if (i !== index) {
                if (this.spells[i] === summonerSpellCode) {
                    return false;
                }
            }
        }
        this.spells[index] = summonerSpellCode;
        return true;
    },
    getSpells: function() {
        return this.spells.slice();
    }
};

$.widget("leaguepress.leaguepressbuild", {
    options: {
        champion: null,
        championSelect: null,
        runes: null,
        runesSelect: null,
        items: null,
        itemsSelect: null,
        summonerspells: null,
        summonerspellsSelect: null,
        masteries: null
    },
    _init: function() {
        var that = this;
        var op = this.options;
        op.championSelect = $("<div/>").leagueSelect({
            closeOnSelect: false,
            icon: {
                height: "32px",
                width: "32px"
            }
        }).on("onSelect", function(event, championCode) {
            op.champion.champion("setChampion", championCode);
        }).appendTo(that.element);
        op.champion = $("<div/>").champion({
            template: loadTemplate("champion.handlebars", "champion.handlebars"),
            champion: "ashe"
        }).on("selectChampion", function() {
            op.championSelect.leagueSelect("show");
        }).appendTo(that.element);
        op.runes = $("<div/>").runesbuild({
            template: loadTemplate("runes_build.handlebars", "runes_build.handlebars")
        }).on("showRunes", function() {
            op.runesSelect.leagueSelect("show");
        }).appendTo(that.element);
        op.runesSelect = $("<div/>").leagueSelect({
            closeOnSelect: false,
            template: loadTemplate("runes_select.handlebars", "runes_select.handlebars"),
            leaguePressResourceName: "runes",
            singularName: "rune",
            pluralName: "runes",
            title: "Runes",
            icon: {
                height: "48px",
                width: "48px"
            }
        }).on("onSelect", function(event, rune) {
            op.runes.runesbuild("addRune", rune);
        }).appendTo(that.element);
        $.fn.LeaguePress.findByCode("items", "health_potion").amountPerSlot = 5;
        $.fn.LeaguePress.findByCode("items", "mana_potion").amountPerSlot = 5;
        $.fn.LeaguePress.findByCode("items", "sight_ward").amountPerSlot = 5;
        $.fn.LeaguePress.findByCode("items", "vision_ward").amountPerSlot = 5;
        op.itemsSelect = $("<div/>").leagueSelect({
            closeOnSelect: false,
            leaguePressResourceName: "items",
            singularName: "item",
            pluralName: "items",
            title: "Items",
            icon: {
                height: "48px",
                width: "48px"
            }
        }).on("onSelect", function(event, item) {
            op.items.itemsbuild("setItem", item);
        }).appendTo(that.element);
        op.items = $("<div/>").itemsbuild({
            template: loadTemplate("items_build.handlebars", "items_build.handlebars")
        }).itemsbuild().on("showItems", function() {
            op.itemsSelect.leagueSelect("show");
        }).appendTo(that.element);
        op.summonerspellsSelect = $("<div/>").leagueSelect({
            closeOnSelect: true,
            leaguePressResourceName: "summonerspells",
            singularName: "summonerspell",
            pluralName: "summonerspells",
            title: "Spells",
            icon: {
                height: "48px",
                width: "48px"
            }
        }).on("onSelect", function(event, spell) {}).appendTo(that.element);
        op.summonerspells = $("<div/>").championSpells({
            template: loadTemplate("champion_summonerspells.handlebars", "champion_summonerspells.handlebars"),
            selector: op.summonerspellsSelect
        }).appendTo(that.element);
        op.masteries = $("<div/>").masteriesbuild({
            template: loadTemplate("masteries_build.handlebars", "masteries_build.handlebars")
        }).appendTo(that.element);
        op.champion.css({
            "margin-bottom": "20px"
        });
        op.summonerspells.css({
            "margin-bottom": "20px"
        });
        op.items.css({
            "margin-bottom": "20px"
        });
        op.runes.css({
            "margin-bottom": "20px"
        });
        op.masteries.css({
            "margin-bottom": "20px"
        });
    },
    save: function() {
        var op = this.options;
        var dt = {
            champion: op.champion.champion("save"),
            runes: op.runes.runesbuild("save"),
            items: op.items.itemsbuild("save"),
            summonerspells: op.summonerspells.championSpells("save"),
            masteries: op.masteries.masteriesbuild("save")
        };
        return dt;
    },
    load: function(data) {
        for (var prop in data) {
            this._loadPart(prop, data);
        }
    },
    _loadPart: function(part, data) {
        var op = this.options;
        if (part) {
            switch (part) {
              case "champion":
                op.champion.champion("load", data.champion);
                break;

              case "runes":
                op.runes.runesbuild("load", data.runes);
                break;

              case "items":
                op.items.itemsbuild("load", data.items);
                break;

              case "summonerspells":
                op.summonerspells.championSpells("load", data.summonerspells);
                break;

              case "masteries":
                op.masteries.masteriesbuild("load", data.masteries);
                break;
            }
        }
    },
    clear: function() {
        var op = this.options;
        op.champion.champion("clear");
        op.runes.runesbuild("clear");
        op.items.itemsbuild("clear");
        op.summonerspells.championSpells("clear");
        op.masteries.masteriesbuild("clear");
    }
});

$.widget("leaguepress.champion", {
    options: {
        template: null,
        champion: null
    },
    save: function() {
        return this.options.champion.save();
    },
    load: function(data) {
        var op = this.options;
        var championData = $.fn.LeaguePress.findByCode("champions", data.code);
        if (championData) {
            op.champion = new Champion();
            op.champion.setData(championData);
            $.each(data.abilities, function(index, obj) {
                op.champion.build.abilities[obj.code] = obj.levels;
            });
            op.champion.build.level = data.level;
            this._render();
        }
    },
    clear: function() {
        this.setChampion("teemo");
    },
    _init: function() {
        if (null === this.options.template) {
            if ("LeaguePress" in window) {
                this.options.template = window["LeaguePress"]["champion.handlebars"];
            }
        }
        if (null !== this.options.champion) {
            this.setChampion(this.options.champion);
        }
    },
    setChampion: function(championCode) {
        var that = this;
        var champion = $.fn.LeaguePress.findByCode("champions", championCode);
        that.options.champion = new Champion();
        that.options.champion.setData(champion);
        that._render();
    },
    _bindEvents: function() {
        var that = this;
        $("td[data-ability]", that.element).on("click.champion", function() {
            if ($(this).is(".ability-selected")) {
                $(this).removeClass("ability-selected");
                that.options.champion.removeBuildAbility($(this).attr("data-ability"), $(this).attr("data-slot"));
            } else {
                that.options.champion.addBuildAbility($(this).attr("data-ability"), $(this).attr("data-slot"));
            }
            that._render();
        });
        $("[data-champion-code]", that.element).on("click.champion", function() {
            $(that.element).trigger("selectChampion");
        });
    },
    _unbindEvents: function() {
        var that = this;
        $("td", that.element).unbind(".champion");
        $("div", that.element).unbind(".champion");
    },
    _render: function() {
        var that = this;
        var ele = $(that.element);
        that._unbindEvents();
        ele.html(this.options.template({
            champion: that.options.champion,
            slots: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ],
            debug: JSON.stringify(that.options.champion)
        }));
        $.each(that.options.champion.build.abilities, function(abilityCode, selectedList) {
            $.each(selectedList, function(i, slotNumber) {
                $(".champion-ability[data-ability='" + abilityCode + "'][data-slot='" + slotNumber + "']").addClass("ability-selected");
            });
        });
        that._bindEvents();
    }
});

$.widget("leaguepress.itemsbuild", {
    options: {
        template: null,
        infoTemplate: null,
        itemsbuild: null,
        itemIndex: 0,
        itemSetIndex: 0
    },
    save: function() {
        return this.options.itemsbuild.save();
    },
    clear: function() {
        this.options.itemsbuild = new ItemsBuild();
        this._render();
    },
    load: function(data) {
        var op = this.options;
        if (data) {
            op.itemsbuild = new ItemsBuild();
            op.itemsbuild.removeItemSet(0);
            $.each(data, function(itemSetIndex, itemSet) {
                var is = op.itemsbuild.addItemSet(itemSet.items);
                is.title = itemSet.title;
            });
        }
        this._render();
    },
    _init: function() {
        if (null === this.options.template) {
            if ("LeaguePress" in window) {
                this.options.template = window["LeaguePress"]["items_build.handlebars"];
            }
        }
        this.options.itemsbuild = new ItemsBuild();
        this.options.itemsbuild.addItem("boots_of_speed");
        this.options.itemsbuild.addItem("health_potion");
        this.options.itemsbuild.addItemAtIndex("health_potion", 0, 1);
        this.options.itemsbuild.addItemAtIndex("health_potion", 0, 1);
        this._render();
    },
    _bindEvents: function() {
        var that = this;
        var ele = $(that.element);
        $(".items-show", that.element).on("click.itemsbuild", function() {
            $(ele).trigger("showItems");
            return false;
        });
        $(".itemset-add", that.element).on("click.itemsbuild", function() {
            that.options.itemsbuild.addItemSet();
            that._render();
            return false;
        });
        $(".itemset-remove", that.element).on("click.itemsbuild", function() {
            var ix = $(this).parent("div[data-itemset-index]").attr("data-itemset-index");
            that.options.itemsbuild.removeItemSet(ix);
            that._render();
            return false;
        });
        $(".title input", that.element).on("keyup.itemsbuild", function() {
            var title = $(this).val();
            var ixs = $(this).parents("div[data-itemset-index]").first().attr("data-itemset-index");
            that.options.itemsbuild.setTitle(title, ixs);
        });
        $(".item-remove", that.element).on("click.itemsbuild", function() {
            var ix = $("div[data-item-index]", $(this).parent("")).attr("data-item-index");
            var ixs = $(this).parents("div[data-itemset-index]").first().attr("data-itemset-index");
            that.options.itemsbuild.removeItemAtIndex(ixs, ix);
            that._render();
            return false;
        });
        $(".item-add", that.element).on("click.itemsbuild", function() {
            var ix = $("div[data-item-index]", $(this).parent("")).attr("data-item-index");
            var ixs = $(this).parents("div[data-itemset-index]").first().attr("data-itemset-index");
            var itemCode = $("div[data-item-code]", $(this).parent("")).attr("data-item-code");
            that.options.itemsbuild.addItemAtIndex(itemCode, ixs, ix);
            that._render();
            return false;
        });
        $("div[data-item-index]", that.element).on("click.itemsbuild", function() {
            that.options.itemIndex = $(this).attr("data-item-index");
            that.options.itemSetIndex = $(this).parents("div[data-itemset-index]").first().attr("data-itemset-index");
            that._render();
            return false;
        });
        $("div[data-item-code]", ele).on("mouseover.itemsbuild", function(event) {
            var code = $(this).attr("data-item-code");
            var item = $.fn.LeaguePress.findByCode("items", code);
            if (item) {
                if (that.options.infoTemplate) {
                    var position = $(this).offset();
                    $(".item-info").on("click.itemsbuild", function() {
                        $(this).hide();
                    });
                    $(".item-info").html(that.options.infoTemplate({
                        item: item
                    })).css({
                        top: position.top + 40 + "px",
                        left: position.left + 40 + "px",
                        "z-index": "200",
                        opacity: "0.8"
                    }).fadeIn();
                    clearTimeout(itemInfoHandler);
                    itemInfoHandler = setTimeout(function() {
                        $(".item-info").hide();
                    }, 2500);
                }
            }
        });
    },
    _unbindEvents: function() {
        var that = this;
        $("div", that.element).unbind(".itemsbuild");
    },
    _render: function() {
        var that = this;
        var ele = $(this.element);
        that._unbindEvents();
        ele.html(this.options.template({
            itemsbuild: this.options.itemsbuild
        }));
        var ixs = that.options.itemSetIndex;
        var ix = that.options.itemIndex;
        $("div[data-itemset-index=" + ixs + "] div[data-item-index=" + ix + "]", ele).parents("li").first().addClass("selected");
        that._bindEvents();
    },
    setItem: function(itemCode) {
        var that = this;
        that.options.itemsbuild.addItemAtIndex(itemCode, that.options.itemSetIndex, that.options.itemIndex);
        that.options.itemIndex++;
        that.options.itemIndex = ItemSet.prototype.ensureValidIndex(that.options.itemIndex);
        that._render();
    }
});

$.widget("leaguepress.masteriesbuild", {
    options: {
        masteriesbuild: null,
        template: null
    },
    save: function() {
        return this.options.masteriesbuild.save();
    },
    load: function(data) {
        var op = this.options;
        if (data) {
            var master = new MasteriesBuild();
            master.build = {};
            $.each(data, function(index, object) {
                master.build[object.code] = object.rank;
            });
            if (master.validate()) {
                op.masteriesbuild = master;
                this._render();
            }
        }
    },
    clear: function() {
        this.options.masteriesbuild = new MasteriesBuild();
        this._render();
    },
    _init: function() {
        this.options.masteriesbuild = new MasteriesBuild();
        if (null === this.options.template) {
            if ("LeaguePress" in window) {
                this.options.template = window["LeaguePress"]["masteries_build.handlebars"];
            }
        }
        this._render();
    },
    _bindEvents: function() {
        var that = this;
        var ele = $(that.element);
        $("[data-mastery-code]", ele).on("click.masteriesbuild", function() {
            var mastery = $(this).attr("data-mastery-code");
            that.options.masteriesbuild.addMastery(mastery);
            that._render();
        });
        $("[data-mastery-code]", ele).on("contextmenu.masteriesbuild", function() {
            var mastery = $(this).attr("data-mastery-code");
            that.options.masteriesbuild.removeMastery(mastery);
            that._render();
            return false;
        });
    },
    _unbindEvents: function() {
        var that = this;
        $("div", that.element).unbind(".masteriesbuild");
    },
    _render: function() {
        var that = this;
        var ele = $(that.element);
        that._unbindEvents();
        ele.html(this.options.template({
            masteriesbuild: this.options.masteriesbuild.getContext()
        }));
        that._bindEvents();
    }
});

$.widget("leaguepress.runesbuild", {
    options: {
        template: null,
        runesbuild: null
    },
    save: function() {
        return this.options.runesbuild.save();
    },
    load: function(data) {
        this.options.runesbuild = new RunesBuild();
        this.options.runesbuild.load(data);
        this._render();
    },
    clear: function() {
        this.options.runesbuild = new RunesBuild();
        this._render();
    },
    _init: function() {
        this.options.runesbuild = new RunesBuild();
        if (null === this.options.template) {
            this.options.template = window.loadTemplate("runes_build.handlebars", "runes_build.handlebars");
        }
        this._render();
    },
    _bindEvents: function() {
        var that = this;
        $(".runes-show", that.element).on("click.runesbuild", function() {
            $(that.element).trigger("showRunes");
            return false;
        });
        $("li", that.element).on("click.runesbuild", function() {
            var runeCode = $("[data-rune-code]", this).attr("data-rune-code");
            that.options.runesbuild.addRune(runeCode);
            that._render();
        });
        $("li", that.element).on("contextmenu.runesbuild", function() {
            var runeCode = $("[data-rune-code]", this).attr("data-rune-code");
            that.options.runesbuild.removeRune(runeCode);
            that._render();
            return false;
        });
        $("li", that.element).on("click.runesbuild", ".remove-rune", function() {
            var runeCode = $(this).closest("[data-rune-code]").attr("data-rune-code");
            that.options.runesbuild.removeRune(runeCode);
            that._render();
            return false;
        });
        $("li", that.element).on("click.runesbuild", ".add-rune", function() {
            var runeCode = $(this).closest("[data-rune-code]").attr("data-rune-code");
            that.options.runesbuild.addRune(runeCode);
            that._render();
            return false;
        });
    },
    _unbindEvents: function() {
        var that = this;
        $("li", that.element).unbind(".runesbuild");
        $(".runes-show", that.element).unbind(".runesbuild");
    },
    _render: function() {
        var that = this;
        var ele = $(this.element);
        that._unbindEvents();
        ele.html(this.options.template({
            runesbuild: this.options.runesbuild
        }));
        that._bindEvents();
    },
    addRune: function(runeCode) {
        this.options.runesbuild.addRune(runeCode);
        this._render();
    }
});

$.widget("leaguepress.championSpells", {
    options: {
        template: null,
        spells: null,
        selectedIndex: 0,
        selector: null
    },
    save: function() {
        return this.options.spells.save();
    },
    load: function(data) {
        this.options.spells = new ChampionSpells();
        this.options.spells.load(data);
        this._render();
    },
    clear: function() {
        this.options.spells = new ChampionSpells();
        this.options.spells.setSpell(0, "flash");
        this.options.spells.setSpell(1, "ignite");
        this._render();
    },
    _init: function() {
        var that = this;
        if (null === this.options.template) {
            if ("LeaguePress" in window) {
                this.options.template = window["LeaguePress"]["champion_summonerspells.handlebars"];
            }
        }
        that.options.spells = new ChampionSpells();
        that.options.spells.setSpell(0, "flash");
        that.options.spells.setSpell(1, "ignite");
        that._render();
    },
    _render: function() {
        var that = this;
        var spellsSelect = that.options.selector;
        spellsSelect.unbind("onSelect");
        $("div[data-summonerspell-index]", that.element).unbind("click");
        $(that.element).html(that.options.template({
            summonerspells: that.options.spells.getSpells()
        }));
        $("div[data-summonerspell-index]", that.element).removeClass("selected");
        $("div[data-summonerspell-index='" + that.options.selectedIndex + "']", that.element).addClass("selected");
        spellsSelect.on("onSelect", function(event, spell) {
            that.options.spells.setSpell(that.options.selectedIndex, spell);
            that._render();
        });
        $("div[data-summonerspell-index]", that.element).click(function() {
            that.options.selectedIndex = parseInt($(this).attr("data-summonerspell-index"), 10);
            spellsSelect.leagueSelect("show");
            that._render();
        });
    },
    getSpells: function() {
        return this.options.spells.getSpells();
    }
});

$.widget("leaguepress.leagueTooltip", {
    options: {
        target: null,
        "class": "leaguepress-ui-tooltip",
        template: null,
        timeout: 2e3,
        codeAttributeName: "data-code",
        leaguePressResourceName: "champions",
        timeoutHandler: null
    },
    _init: function() {
        var that = this;
        if (null === this.options.template) {
            throw {
                name: "TemplateNotFound",
                message: "Template required, none found."
            };
        }
        $(that.element).addClass(that.options.class);
        $(this.options.target).on("mouseover", "[" + this.options.codeAttributeName + "]", function() {
            var position = $(this).offset();
            that.render.call(that, this, position);
        });
    },
    _destroy: function() {
        $(this.options.target).unbind("mouseover");
    },
    render: function(element, position) {
        if (typeof this.options.template === "function") {
            var code = $(element).attr(this.options.codeAttributeName);
            var data = $.fn.LeaguePress.findByCode(this.options.leaguePressResourceName, code);
            if (data) {
                var content = this.options.template(data);
                this.show(content, position);
            }
        }
    },
    show: function(content, position) {
        var that = this;
        $(this.element).html(content).css({
            opacity: "0.8",
            top: position.top + 40 + "px",
            left: position.left + 40 + "px"
        }).fadeIn();
        clearTimeout(this.options.timeoutHandler);
        this.options.timeoutHandler = setTimeout(function() {
            that.hide();
        }, that.options.timeout);
    },
    hide: function() {
        $(this.element).hide();
    }
});

$.widget("leaguepress.leagueSelect", {
    options: {
        template: null,
        selected: null,
        closeOnSelect: true,
        top: 50,
        left: 50,
        leaguePressResourceName: "champions",
        singularName: "champion",
        pluralName: "champions",
        title: "Champions",
        icon: {
            height: "32px",
            width: "32px"
        }
    },
    _init: function() {
        var that = this;
        if (null === this.options.template) {
            this.options.template = window.loadTemplate("league_select.handlebars", "league_select.handlebars");
        }
        $(that.element).draggable().css({
            position: "absolute",
            top: that.options.top + "px",
            left: that.options.left + "px"
        });
        $(that.element).on("onSelect", that.onSelect);
        that.options.index = 0;
        that._render();
        that.hide();
    },
    show: function() {
        $(this.element).show();
    },
    hide: function() {
        $(this.element).hide();
    },
    onSelect: function(event, spell) {
        return true;
    },
    _bindEvents: function() {
        var that = this;
        var element = $(this.element);
        var op = that.options;
        $("input[name='filter']", element).on("keyup", function() {
            var filter = $(this).val();
            var regex = new RegExp(filter, "gi");
            $("div[data-" + op.singularName + "-code]", element).each(function(index, element) {
                var value = $(element).attr("data-" + op.singularName + "-code");
                var isMatch = regex.test(value);
                if (!isMatch) {
                    $(element).closest("li").hide();
                } else {
                    $(element).closest("li").show();
                }
            });
        });
        $("span.glyphicon-remove", element).click(function() {
            that.hide.call(that);
        });
        $("ul", element).on("click", "li", function() {
            var codeElement = $("[data-" + op.singularName + "-code]", this).first();
            op.selected = codeElement.attr("data-" + op.singularName + "-code");
            $(that.element).trigger("onSelect", op.selected);
            if (op.closeOnSelect) {
                that.hide.call(that);
            }
            return false;
        });
    },
    _unbindEvents: function() {
        var element = $(this.element);
        $("input[name='filter']", element).unbind("keyup");
        $("span.glyphicon-remove", element).unbind("click");
        $("ul", element).unbind("click");
    },
    _render: function() {
        var that = this;
        var ele = $(this.element);
        var op = that.options;
        that._unbindEvents();
        var data = {
            title: op.title,
            singularName: op.singularName,
            pluralName: op.pluralName,
            list: $.fn.LeaguePress[op.leaguePressResourceName]
        };
        ele.html(op.template(data));
        $(".ui-list li div", that.element).css({
            height: op.icon.height,
            width: op.icon.width
        });
        that._bindEvents();
    }
});
});})(jQuery);
